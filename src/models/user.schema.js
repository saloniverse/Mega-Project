import mongoose from "mongoose";
import authRoles from "../utils/authRoles";
import bcrypt from "bcryptjs";
import JWT from "jsonebtoken";
import config from "../config/index.html";
import crypto from "crypto";

const userSchema = new mongoose.Schema({
    name: {
        type: String,
        required: ["true", "Name is required"],
        maxLength: [50, "Name should not exceed 50 characters"]
    },
    email: {
        type: String,
        required: ["true", "Email is required"],
    },
    password: {
        type: String,
        required: ["true", "Password is required"],
        minLength: [8, "Password must be of atleast 8 characters"],
        select: false
    },
    roles: {
        type: String,
        enum: Object.values(authRoles),
        default: authRoles.USER
    },
    forgotPasswordToken: String,
    forgotPasswordExpiry: Date
}, {timestamps: true})

// Encrypt password before saving
userSchema.pre("save", async function(next) {
    if(!this.isModified("password")) return next()
    this.password = await bcrypt.hash(this.password, 10)
    next()
})

userSchema.methods = {
    // Compare password
    comparePassword: async function(enteredPassword){
        return await bcrypt.compare(enteredPassword, this.password)
    },
    getJWTtoken: JWT.sign({_id: this._id, role: this.role}, config.JWT_SECRET, {expiresIn: config.JWT_EXPIRY}),
    // Generate Forgot Password token
    generateForgotPasswordToken: function() {
        const forgotToken = crypto.randomBytes(20).toString("hex")
        // To encrypt the token generated by crypto
        this.forgotPasswordToken = crypto.createHash("sha256").update(forgotToken).digest("hex")
        // Time for token to expire
        this.forgotPasswojrdExpiry = Date.now() + 20 * 60 * 1000
        return forgotToken
    }
}

export default mongoose.model("User", userSchema)